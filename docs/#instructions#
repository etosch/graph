

Fitness function
The regexp pro

Instruction add-connected-nodes
The original intent of this instruction was to facilitate quick resolution of trivial regex problems on a primitive fitness function. 

(((connect-to-accept 40 nth-next 39 add-connected-nodes) add-connected-nodes (3 connect-to-accept) add-connected-nodes))
(((add-connected-nodes 7) nth-next (add-connected-nodes nth-next connect-to-accept) (8))) -> 5 errors
((add-connected-nodes (add-connected-nodes 36 ((nth-next (nth-next 27) connect-to-accept nth-next) (nth-next nth-next) connect-to-accept (nth-next (add-connected-nodes (30)) connect-to-accept (42 nth-next)) connect-to-accept (49)) nth-next) add-connected-nodes)) -> overflow
((((connect-to-accept connect-to-accept nth-next) 15) ((connect-to-accept 26 (nth-next nth-next)) connect-to-accept) (connect-to-accept) connect-to-accept (nth-next) connect-to-accept (add-connected-nodes nth-next))) -> 0 errors
((((17 (nth-next 21)) add-connected-nodes (nth-next)) (add-connected-nodes (nth-next (nth-next) 42) (connect-to-accept)) ((nth-next 42) add-connected-nodes add-connected-nodes (nth-next)) 8 add-connected-nodes)) -> 0 errors
10 pts
((connect-to-accept connect-to-accept (nth-next add-connected-nodes) 23)) 5
((connect-to-accept (add-connected-nodes add-connected-nodes) (48) add-connected-nodes (add-connected-nodes))) 5
((47 46 connect-to-accept)) 5
12
((nth-next nth-next (connect-to-accept 36 (46)))) 5
(((15 add-connected-nodes) connect-to-accept (add-connected-nodes (add-connected-nodes) (connect-to-accept) 14))) 5
(((connect-to-accept connect-to-accept (connect-to-accept (connect-to-accept) connect-to-accept)) (38) connect-to-accept)) 5